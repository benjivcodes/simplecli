#!/usr/bin/env bash
# Wrapper for Android tools/SDK

function android_description(){
    echo "Android SDK and Platform toolchain helper for macOS"
}

function android_help(){
  echo -e "\n usage: $(basename "$0") android <subcommand>"
  echo -e "\n AVAILABLE SUBCOMMANDS:\n"
  echo " unlock      unlock the Boot Loader"
  echo " auto        perform automated firmware install"
  echo " manual      perform manual firmware install"
  echo " lock        lock the Boot Loader"
  echo " fetch       get the latest Factory and OTA images"
  echo " ota         peform an OTA firmware image install"
  echo " help        this message"
	echo ""
}

function android_handle(){
  local OTAFILE
  command="$1"

  case $command in
    unlock)
      echo -e "\nRebooting into bootloader..."
      adb reboot bootloader
      sleep 10
      echo -e "\nUnlocking bootloader..."
      fastboot flashing unlock
      sleep 10
      fastboot flashing unlock_critical
      sleep 10
    ;;

    auto)
      echo -e "\nAttempting automated install.."
      adb reboot bootloader
      sleep 5
      ./flash-all.sh
      echo -e "\nLocking bootloader..."
      fastboot flashing lock
    ;;

    lock)
      echo -e "\nRebooting into bootloader..."
      adb reboot bootloader
      sleep 5
      echo -e "\nLocking bootloader..."
      fastboot flashing lock
    ;;

    fetch)
      echo -e "\nYou can get the latest Factory Images from https://developers.google.com/android/images"
      echo -e "You can get Full OTA Images from https://developers.google.com/android/ota\n"
    ;;

    ota)
      shift;
      OTAFILE="$1"
      echo -e "\nRebooting into recovery..."
      adb reboot recovery
      sleep 20
      echo -e "\nVerify your device is sideload ready (should appear with ${bold}sideload${normal}..."
      adb devices
      sleep 10
      echo -e "\nBegining sideload of ${OTAFILE}"
      adb sideload "${OTAFILE}"
    ;;

    help)
      android_help
    ;;

    *)
      android_help
    ;;
  esac
}