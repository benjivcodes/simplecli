#!/usr/bin/env bash
# Common functions for BaSH Profile Configuration
# This should be sourced from the environment configuration, e.g. .bash_profile

# Ensure no core files by default and default umask
ulimit -S -c 0
umask 022

# Set some $PATH stuff
PATH=/usr/local/opt/openssl/bin:${PATH}
PATH=/usr/local/opt/curl/bin:${PATH}
PATH=/usr/local/opt/coreutils/libexec/gnubin:${PATH}
PATH=/usr/local/opt/gnu-getopt/bin:${PATH}
PATH=/usr/local/opt/go/libexec/bin:${PATH}
PATH=/usr/local/opt/grep/libexec/gnubin:${PATH}
PATH=/usr/local/opt/gnu-getopt/bin:${PATH}
PATH=/usr/local/opt/gnu-sed/libexec/gnubin:${PATH}
PATH=/usr/local/opt/ruby/bin:${PATH}
PATH=/home/linuxbrew/.linuxbrew/bin:${PATH}
PATH=/home/linuxbrew/.linuxbrew/sbin:${PATH}
PATH=${HOME}/.simplecli/bin:${PATH}
PATH=${PATH}:/usr/local/bin:/usr/local/sbin:/bin:/sbin:/usr/bin:/usr/sbin
export PATH

export BASH_SILENCE_DEPRECATION_WARNING=1
export LOGIN_TRACKER="${HOME}"/.oplogin

# Setup some input pre-processing on less.
export LESSOPEN="|lesspipe.sh %s"

# Let Homeebrew use variables
export HOMEBREW_USE_GCC=1
export HOMEBREW_NO_ANALYTICS=1

# Set the default editor.
export EDITOR="/usr/bin/vim"
export VISUAL="${EDITOR}" SVN_EDITOR="${EDITOR}"

# Set some behavior reguarding history.
export HISTFILE="${HOME}"/.bash_history
export HISTSIZE=100000
export HISTCONTROL=ignoreboth
export HISTTIMEFORMAT="%F %T "

# Set some reasonable shell options
if [[ "${SHELL}" = "/usr/local/bin/bash" ]]
then
  shopt -s histappend
  shopt -s checkwinsize
  [ -e "/usr/local/etc/profile.d/bash_completion.sh" ] && source "/usr/local/etc/profile.d/bash_completion.sh"
fi

# Set some basic colors
export LSCOLORS=gxfxcxdxbxegedabagacad

# Add password to MacOS keychain
function addkeypass(){
  /usr/bin/security add-generic-password -a ${USER} -s "$1" -w
}

# Get password from MacOS keychain
function getkeypass(){
  /usr/bin/security find-generic-password -a ${USER} -w -s "$1"
}

# Simple file sort
function sf(){
  sort -u -o "$1" "$1"
}

# Smarter-ish ssh-agent handling
function sshagent_findsockets(){
  find /tmp -uid $(id -u) -type s -name agent.\* 2>/dev/null
}

function sshagent_testsocket(){
  if [[ X"$1" != X ]]
  then
    export SSH_AUTH_SOCK=$1
  fi

  if [[ X"${SSH_AUTH_SOCK}" = X ]]
  then
    exit 2
  fi

  if [[ -S ${SSH_AUTH_SOCK} ]]
  then
    ssh-add -l > /dev/null
    if [[ $? = 2 ]]
    then
      rm -f ${SSH_AUTH_SOCK}
      return 4
    else
      return 0
    fi
  else
    echo "${SSH_AUTH_SOCK} is not a socket!"
    return 3
  fi
}

function sshagent_init(){
  AGENTFOUND=0

  if sshagent_testsocket
  then
    AGENTFOUND=1
  fi

  if [[ ${AGENTFOUND} = 0 ]]
  then
    for AGENTSOCKET in $(sshagent_findsockets)
    do
      if [[ ${AGENTFOUND} != 0 ]] ; then break ; fi
      if sshagent_testsocket $AGENTSOCKET ; then AGENTFOUND=1 ; fi
    done
  fi

  if [[ ${AGENTFOUND} = 0 ]]
  then
    eval $(ssh-agent)
  fi

  unset AGENTFOUND
  unset AGENTSOCKET
}

# Simple ssh tab completion
function _ssh() 
{
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts=$(grep '^Host' ~/.ssh/config ~/.ssh/config.d/* 2>/dev/null | grep -v '[?*]' | cut -d ' ' -f 2-)
  COMPREPLY=( "$(compgen -W $opts -- ${cur})" )
  return 0
}

# Enable SSH alias tab completion
complete -F _ssh ssh

# Inject new locations into the first position in $PATH
function pathmunge(){
  if ! echo "${PATH}" | grep -E -q "(^|:)$1($|:)"
  then
    PATH="$1":"${PATH}"
  fi
}

# Inject new locations into the first position in $MANPATH
function manpathmunge(){
  if ! echo "${MANPATH}" | grep -E -q "(^|:)$1($|:)"
  then
    MANPATH="$1":"${MANPATH}"
  fi
}

# Run a basic BaSH lint with shellcheck on a script
function checkscript(){
  /usr/local/bin/shellcheck -s bash "$1"
}

# A date function with standarized formatting
function timestamp(){
  date '+%Y-%m-%d %H:%M:%S'
}

# Replace dashes with underscores
function rdashes(){
  for i in *-*
  do
    j="${i//-/_}"
    mv "$i" "$j"
  done
}

# Replace spaces with underscores
function rspaces(){
  for i in *" "*
  do
    j="${i// /_}"
    mv "$i" "$j"
  done
}

# Read from file so that you can iterate over each line
function readfrom(){
  while read -r line
  do
    echo "$line"
  done < "$1"
}

# Attempt to download Youtube video and make mp3 file from the audio
function yt2mp3(){
  [ ! -e /usr/local/bin/youtube-dl ] && cli install youtube-dl
  [ ! -e /usr/local/bin/ffmpeg ] && cli install ffmpeg
  if [[ -z "$1" ]]
  then
    echo -e "\n!!! Youtube Link Please..."
    read -r ytlink
    youtube-dl "${ytlink}" -q -x --audio-format mp3 -o "${HOME}/Downloads/%(title)s.%(ext)s"
  else
    ytlink="$1"
    youtube-dl "${ytlink}" -q -x --audio-format mp3 -o "${HOME}/Downloads/%(title)s.%(ext)s"
  fi
}

# Extract pubkey from pem file
function sshpem2pub(){
  ssh-keygen -y -f "$1"
}

# Single use invocation of ClamScan
function scanthis(){
  if [ ! -e "/usr/local/bin/freshclam" ]
  then
    echo -e "\nInstallig clamav ..."
    cli install clamav > /dev/null 2>&1
    mkdir -p "/usr/local/var/run/clamav"
    cp "/usr/local/etc/clamav/clamd.conf.sample" "/usr/local/etc/clamav/clamd.conf"
    echo "DatabaseMirror database.clamav.net" > "/usr/local/etc/clamav/freshclam.conf"
  fi

  echo -e " Updating virus definitions ..."
  /usr/local/bin/freshclam --quiet
  
  echo -e " Begining scan of target: $1 ..."
  clamscan --infected --recursive=yes --scan-mail=yes --max-filesize=2000M "$1"
  echo " "
}

# Remove the hidden file attribute
function unhide(){
  sudo chflags nohidden "$1"
}

# Let's have some help working with relative paths; this should resolve the current location
# of the script it's run from (yes, it's self referencing) even it's a symlink! This
# could be much simpler when you don't care about symmlinks:
# DIR=$(dirname "${BASH_SOURCE[0]}")
function whereami(){
  SOURCE="${BASH_SOURCE[0]}"
  while [[ -h "${SOURCE}" ]]
  do
    DIR="$(cd -P "$(dirname "${SOURCE}")" && pwd)"
    SOURCE="$(readlink "${SOURCE}")"
    [[ ${SOURCE} != /* ]] && SOURCE="$DIR/${SOURCE}"
  done
  DIR="$(cd -P "$(dirname "${SOURCE}")" && pwd)"
}

# How long is the cert valid?
function cert-valid-until(){
  /usr/local/opt/openssl/bin/openssl x509 -dates -noout -in "$1"
}

# Some useful git functions
function newbranch(){
  git checkout --quiet master
  git pull --quiet
  git checkout -b "$1"
}

function pushbranch(){
  git push --set-upstream origin "$(git rev-parse --abbrev-ref HEAD)"
}

function deletemerged(){
  local MERGED_BRANCHES="/tmp/cli-git-mb.txt"
  git checkout --quiet master
  git pull --quiet
  git branch --merged | grep -vi master > "${MERGED_BRANCHES}"
  xargs git branch -d < "${MERGED_BRANCHES}"
  rm -f "${MERGED_BRANCHES}"
}

function prunebranches(){
  git branch -vv | grep 'origin/.*: gone]' | awk '{print $1}' | xargs git branch -D
}

function repoinfo(){
  local OUTPUT=$(mktemp)
  {
    echo "==== This output is displayed with LESS ==="
    echo -e "== Remote URL:\n$(git remote -v)\n"
    echo -e "== Remote Branches:\n$( git branch -r)\n"
    echo -e "== Local Branches:\n$( git branch)\n"
    echo -e "== Configuration (.git/config):\n$( cat .git/config)\n"
    echo -e "== Most Recent Commit:\n$( git --no-pager log --max-count=1)\n"
    echo " " 
  } >> "${OUTPUT}"
  less "${OUTPUT}"
}

# Set some aliases
alias ...='reset'
alias cp='cp -i'
alias rm='rm -i'
alias ls='ls -FG --color=auto'
alias sudo='sudo -H'
alias e='vimr'
alias vi='/usr/bin/vim -X'
alias vim='/usr/bin/vim -X'
alias grep='grep -i --color'

# Set shellcheck options
export SHELLCHECK_OPTS="-x -e SC2145\
 -e SC2155 -e SC2154 -e SC2086\
 -e SC2046 -e SC2003 -e SC1090\
 -e SC1117 -e SC1090 -e SC1091\
 -e SC2059 -e SC2034 -e SC2002\
 -e SC2005 -e SC1001 -e SC2004\
 -e SC1091"

# Golang settings
if [[ "$(uname -s)" = "Darwin" ]]
then
  test -e /usr/local/opt/go/libexec && export GOROOT="/usr/local/opt/go/libexec"
  test -e /usr/local/opt/go/libexec && export GOPATH="${GOROOT}/bin/go"
fi

### Begin BaSH colors ###
if [[ "${SHELL}" = "/usr/local/bin/bash" ]]
then
  # Reset
  Color_Off='\e[0m' # Text Reset

  # Regular Colors
  Black='\e[0;30m'  # Black
  Red='\e[0;31m'    # Red
  Green='\e[0;32m'  # Green
  Yellow='\e[0;33m' # Yellow
  Blue='\e[0;34m'   # Blue
  Purple='\e[0;35m' # Purple
  Cyan='\e[0;36m'   # Cyan
  White='\e[0;37m'  # White

  # Bold
  BBlack='\e[1;30m'  # Black
  BRed='\e[1;31m'    # Red
  BGreen='\e[1;32m'  # Green
  BYellow='\e[1;33m' # Yellow
  BBlue='\e[1;34m'   # Blue
  BPurple='\e[1;35m' # Purple
  BCyan='\e[1;36m'   # Cyan
  BWhite='\e[1;37m'  # White

  # Underline
  UBlack='\e[4;30m'  # Black
  URed='\e[4;31m'    # Red
  UGreen='\e[4;32m'  # Green
  UYellow='\e[4;33m' # Yellow
  UBlue='\e[4;34m'   # Blue
  UPurple='\e[4;35m' # Purple
  UCyan='\e[4;36m'   # Cyan
  UWhite='\e[4;37m'  # White

  # Background
  On_Black='\e[40m'  # Black
  On_Red='\e[41m'    # Red
  On_Green='\e[42m'  # Green
  On_Yellow='\e[43m' # Yellow
  On_Blue='\e[44m'   # Blue
  On_Purple='\e[45m' # Purple
  On_Cyan='\e[46m'   # Cyan
  On_White='\e[47m'  # White

  # High Intensty
  IBlack='\e[0;90m'  # Black
  IRed='\033[0;91m'  # Red
  IGreen='\e[0;92m'  # Green
  IYellow='\e[0;93m' # Yellow
  IBlue='\e[0;94m'   # Blue
  IPurple='\e[0;95m' # Purple
  ICyan='\e[0;96m'   # Cyan
  IWhite='\e[0;97m'  # White

  # Bold High Intensty
  BIBlack='\e[1;90m'  # Black
  BIRed='\e[1;91m'    # Red
  BIGreen='\e[1;92m'  # Green
  BIYellow='\e[1;93m' # Yellow
  BIBlue='\e[1;94m'   # Blue
  BIPurple='\e[1;95m' # Purple
  BICyan='\e[1;96m'   # Cyan
  BIWhite='\e[1;97m'  # White

  # High Intensty backgrounds
  On_IBlack='\e[0;100m'  # Black
  On_IRed='\e[0;101m'    # Red
  On_IGreen='\e[0;102m'  # Green
  On_IYellow='\e[0;103m' # Yellow
  On_IBlue='\e[0;104m'   # Blue
  On_IPurple='\e[10;95m' # Purple
  On_ICyan='\e[0;106m'   # Cyan
  On_IWhite='\e[0;107m'  # White
fi
### End BaSH Colors ###

# Simple color test
function colortest(){
  echo " "
  echo -e "\033[0mCOLOR_NC (No color)"
  echo -e "\033[1;37mCOLOR_WHITE\t\033[0;30mCOLOR_BLACK"
  echo -e "\033[0;34mCOLOR_BLUE\t\033[1;34mCOLOR_LIGHT_BLUE"
  echo -e "\033[0;32mCOLOR_GREEN\t\033[1;32mCOLOR_LIGHT_GREEN"
  echo -e "\033[0;36mCOLOR_CYAN\t\033[1;36mCOLOR_LIGHT_CYAN"
  echo -e "\033[0;31mCOLOR_RED\t\033[1;31mCOLOR_LIGHT_RED"
  echo -e "\033[0;35mCOLOR_PURPLE\t\033[1;35mCOLOR_LIGHT_PURPLE"
  echo -e "\033[0;33mCOLOR_YELLOW\t\033[1;33mCOLOR_LIGHT_YELLOW"
  echo -e "\033[1;30mCOLOR_GRAY\t\033[0;37mCOLOR_LIGHT_GRAY"
  echo " "
}

# Set the prompt, it's time to work.
function _prompt_command(){
  PS1="\[$IRed\][\h]\[$IRed\][\[$Blue\]\u\[$IPurple\]::\W\[$IRed\]]\[$IGreen\][\D{%Y-%m-%d %H:%M}]\n\$ \[$Color_Off\]"
}