#!/usr/bin/env bash
# Common functions for BaSH Profile Configuration
# This should be sources from the environment configuration, e.g. .bash_profile

# Update slacktee
function update_slacktee(){
  pushd . >/dev/null || exit 1
  cd /tmp || exit1
  rm -f slacktee.sh
  curl -s https://api.github.com/repos/coursehero/slacktee/releases/latest | jq '.zipball_url' | xargs wget -qic  -A ".zip" -O temp.zip && unzip -q -j -o -u temp.zip *slacktee.sh
  mv slacktee.sh ${CLIHOME}/3rdparty/bin/slacktee
  popd >/dev/null || exit 1
}

# 1password-cli functions
function opon() {
  eval $(op signin my)
}

function opoff() {
  op signout
  unset OP_SESSION_my
}

function opsshkey() {
  eval $(op signin my)
  echo "$(op get item "ssh-key-master" |jq -r '.details.notesPlain')"|ssh-add -
  op signout
}

function update_op(){
  cd /tmp || exit 1
  rm -f op_darwin*
  wget $(lynx -dump -listonly https://app-updates.agilebits.com/product_history/CLI | grep ^"\ \ \ 2" | sed -r 's/^\ \ \ [0-9]+\. //')
  sudo installer -pkg $(ls op_darwin_amd64*) -target /
}

# Inject new locations into the first position in $PATH
function pathmunge() {
    if ! echo "$PATH" | grep -E -q "(^|:)$1($|:)"; then PATH="$1":"$PATH"; fi
}

# Inject new locations into the first position in $MANPATH
function manpathmunge() {
    if ! echo "$MANPATH" | grep -E -q "(^|:)$1($|:)"; then MANPATH="$1":"$MANPATH"; fi
}

# Run a basic BaSH lint with shellcheck on a script
function checkscript() {
    /usr/local/bin/shellcheck -s bash "$1"
}

# A date function with standarized formatting
function timestamp() {
    date '+%Y-%m-%d %H:%M:%S'
}

# Replace dashes with underscores
function rdashes() {
    for i in *-*; do
        j="${i//-/_}"
        mv "$i" "$j"
    done
}

# Replace spaces with underscores
function rspaces() {
    for i in *" "*; do
        j="${i// /_}"
        mv "$i" "$j"
    done
}

# Create a password encryped DMG from a folder on MacOS
function dmgcrypt() {
    darwinonly
    local vol src

    if [ -z "$1" ]; then
        echo -e "Volume name:"
        read -r vol
    else
        vol="$1"
    fi

    if [ -z "$2" ]; then
        echo -e "\nSource folder:"
        read -r src
    else
        src="$2"
    fi

    echo -e "\n"
    hdiutil create "$vol".dmg -ov -volname "$vol" \
        -fs HFS+ -encryption AES-256 -stdinpass -srcfolder "$src"
}

# Create an unencryped DMG from a folder on MacOS
function dmg() {
    darwinonly
    local vol src

    if [ -z "$1" ]; then
        echo -e "Volume name:"
        read -r vol
    else
        vol="$1"
    fi

    if [ -z "$2" ]; then
        echo -e "\nSource folder:"
        read -r src
    else
        src="$2"
    fi

    echo -e "\n"
    hdiutil create "$vol".dmg -ov -volname "$vol" -fs HFS+ -srcfolder "$src"
}

# Read from file so that you can iterate over each line
function readfrom() {
    while read -r line; do echo "$line"; done < "$1"
}

# Attempt to download Youtube video and make mp3 file from the audio
function yt2mp3() {
    [ ! -e /usr/local/bin/youtube-dl ] && brew install youtube-dl
    if [ -z "$1" ]; then
        echo -e "\n!!! Youtube Link Please..."
        read -r ytlink
        youtube-dl "$ytlink" -q -x --audio-format mp3 -o "/tmp/%(title)s.%(ext)s"

    else
        ytlink="$1"
        youtube-dl "$ytlink" -q -x --audio-format mp3 -o "/tmp/%(title)s.%(ext)s"
    fi
}

# Are we on macOS
function darwinonly() {
    if [ ! "$(uname -s)" == "Darwin" ]; then
        echo ""
        echo " This is macOS specific function, sorry."
        echo ""
        exit 1
    fi
}

# Extract pubkey from pem file
function sshpem2pub() {
    ssh-keygen -y -f "$1"
}

# Simple color test
function colortest() {
    echo -e "\033[0mCOLOR_NC (No color)"
    echo -e "\033[1;37mCOLOR_WHITE\t\033[0;30mCOLOR_BLACK"
    echo -e "\033[0;34mCOLOR_BLUE\t\033[1;34mCOLOR_LIGHT_BLUE"
    echo -e "\033[0;32mCOLOR_GREEN\t\033[1;32mCOLOR_LIGHT_GREEN"
    echo -e "\033[0;36mCOLOR_CYAN\t\033[1;36mCOLOR_LIGHT_CYAN"
    echo -e "\033[0;31mCOLOR_RED\t\033[1;31mCOLOR_LIGHT_RED"
    echo -e "\033[0;35mCOLOR_PURPLE\t\033[1;35mCOLOR_LIGHT_PURPLE"
    echo -e "\033[0;33mCOLOR_YELLOW\t\033[1;33mCOLOR_LIGHT_YELLOW"
    echo -e "\033[1;30mCOLOR_GRAY\t\033[0;37mCOLOR_LIGHT_GRAY"
}

# Single use invocation of ClamScan
function scanthis() {
    echo ""
    echo " Updating virus definitions..."
    /usr/local/bin/freshclam --quiet
    echo ""
    echo " Begining scan of target: $1"
    clamscan --infected --recursive=yes --scan-mail=yes --max-filesize=2000M "$1"
}

# Remove the hidden file attribute
function unhide() {
    darwinonly
    sudo chflags nohidden "$1"
}

# Move files with rsync
function transfer() {
    rsync -rauvPpz "$@"
}

# Let's have some help working with relative paths; this should resolve the current location
# of the script it's run from (yes, it's self referencing) even it's a symlink!
function whereami() {
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do
        DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
        SOURCE="$(readlink "$SOURCE")"
        [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
    done
    DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"
}

function _git_prompt() {
    local git_status="$(git status -unormal 2>&1)"
    if ! [[ $git_status =~ Not\ a\ git\ repo ]]; then
        if [[ $git_status =~ nothing\ to\ commit ]]; then
            local ansi=$IGreen
        elif [[ $git_status =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
            local ansi=$IYellow
        else
            local ansi=$IRed
        fi
        if [[ $git_status =~ On\ branch\ ([^[:space:]]+) ]]; then
            branch=${BASH_REMATCH[1]}
            test "$branch" != master || branch='master'
        else
            # Detached HEAD.  (branch=HEAD is a faster alternative.)
            branch="$(git describe --all --contains --abbrev=4 HEAD 2> /dev/null || echo HEAD)"
        fi
        echo -n "\[$ansi\]""(""$branch"")""\[$Color_Off\]"
    fi
}

function _prompt_command() {
    PS1="\[$IRed\][\h]\[$IRed\][\[$Blue\]\u\[$IPurple\]::\W\[$IRed\]]\[$IGreen\]\$ \[$Color_Off\]"
}

# Extract the public key from a PEM based private key
function extractPubKey() {
    /usr/bin/ssh-keygen -f $1 -y > $(basename $1 .pem).pub
}

# How long is the cert valid?
function cert-valid-until() {
    /usr/local/opt/openssl/bin/openssl x509 -dates -noout -in $1
}

function appify() {
    darwinonly
    appname=${2:-$(basename "$1" ".sh")}
    dir="${appname}.app/Contents/MacOS"

    if [ -a "${appname}.app" ]; then
        echo "$PWD/${appname}.app already exists :("
        exit 1
    fi

    mkdir -p "${dir}"
    cp "$1" "${dir}/${appname}"
    chmod +x "${dir}/${appname}"

    echo "${PWD}/${appname}.app"
}

# Set some aliases
alias cp='cp'
alias e='vimr'
alias ls='ls -FG --color=auto'
alias rm='rm -i'
alias sudo='sudo -H'
alias vi='/usr/bin/vim'
alias vim='/usr/bin/vim'
alias subl="/usr/bin/open -a 'Sublime Text'"
alias kvadd="kvset"
alias grep='grep --color'

# Turn the Vagrant gui off
export VAGRANT_GUI="false"

# Disable Homebrew Analytics
export HOMEBREW_NO_ANALYTICS=1

# Set the default editor.
EDITOR="/usr/bin/vim"
export EDITOR VISUAL="${EDITOR}" SVN_EDITOR="${EDITOR}"

# Set some behavior reguarding history.
export HISTFILE=~/.bash_history
export HISTSIZE=100000
export HISTCONTROL=ignoreboth
export HISTTIMEFORMAT="%F %T "
shopt -s histappend

# Ensure no core files by default.
ulimit -S -c 0

# Set some basic colors
export LSCOLORS=gxfxcxdxbxegedabagacad

# Try to get lines to wrap correctly.
shopt -s checkwinsize

# Set a reasonable umask
umask 022

# Enable SuDo tab completion
complete -cf sudo

# Set shellcheck options
export SHELLCHECK_OPTS="-x -e SC2145 -e SC2155 -e SC2154 -e SC2086 -e SC2046 -e SC2003 -e SC1090 -e SC1117 -e SC1090 -e SC1091 -e SC2059 -e SC2034 -e SC2002"

# Java Command Line Tools
if [ -e /usr/libexec/java_home ]; then
    darwinonly
    JAVA_HOME=$(/usr/libexec/java_home)
    export JAVA_HOME
fi

# Go settings
if [ "$(uname -s)" == "Darwin" ]; then
    export GOROOT="/usr/local/opt/go/libexec"
    export GOPATH="${HOME}/.cli/lib/go"
else
    export GOPATH=/usr/share/go/
fi

### Begin BaSH colors ###
# Reset
Color_Off='\e[0m' # Text Reset

# Regular Colors
Black='\e[0;30m'  # Black
Red='\e[0;31m'    # Red
Green='\e[0;32m'  # Green
Yellow='\e[0;33m' # Yellow
Blue='\e[0;34m'   # Blue
Purple='\e[0;35m' # Purple
Cyan='\e[0;36m'   # Cyan
White='\e[0;37m'  # White

# Bold
BBlack='\e[1;30m'  # Black
BRed='\e[1;31m'    # Red
BGreen='\e[1;32m'  # Green
BYellow='\e[1;33m' # Yellow
BBlue='\e[1;34m'   # Blue
BPurple='\e[1;35m' # Purple
BCyan='\e[1;36m'   # Cyan
BWhite='\e[1;37m'  # White

# Underline
UBlack='\e[4;30m'  # Black
URed='\e[4;31m'    # Red
UGreen='\e[4;32m'  # Green
UYellow='\e[4;33m' # Yellow
UBlue='\e[4;34m'   # Blue
UPurple='\e[4;35m' # Purple
UCyan='\e[4;36m'   # Cyan
UWhite='\e[4;37m'  # White

# Background
On_Black='\e[40m'  # Black
On_Red='\e[41m'    # Red
On_Green='\e[42m'  # Green
On_Yellow='\e[43m' # Yellow
On_Blue='\e[44m'   # Blue
On_Purple='\e[45m' # Purple
On_Cyan='\e[46m'   # Cyan
On_White='\e[47m'  # White

# High Intensty
IBlack='\e[0;90m'  # Black
IRed='\033[0;91m'  # Red
IGreen='\e[0;92m'  # Green
IYellow='\e[0;93m' # Yellow
IBlue='\e[0;94m'   # Blue
IPurple='\e[0;95m' # Purple
ICyan='\e[0;96m'   # Cyan
IWhite='\e[0;97m'  # White

# Bold High Intensty
BIBlack='\e[1;90m'  # Black
BIRed='\e[1;91m'    # Red
BIGreen='\e[1;92m'  # Green
BIYellow='\e[1;93m' # Yellow
BIBlue='\e[1;94m'   # Blue
BIPurple='\e[1;95m' # Purple
BICyan='\e[1;96m'   # Cyan
BIWhite='\e[1;97m'  # White

# High Intensty backgrounds
On_IBlack='\e[0;100m'  # Black
On_IRed='\e[0;101m'    # Red
On_IGreen='\e[0;102m'  # Green
On_IYellow='\e[0;103m' # Yellow
On_IBlue='\e[0;104m'   # Blue
On_IPurple='\e[10;95m' # Purple
On_ICyan='\e[0;106m'   # Cyan
On_IWhite='\e[0;107m'  # White

export CLICOLOR=1
### End BaSH Colors ###
